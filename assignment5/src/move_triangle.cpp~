#include <ros/ros.h>
#include "std_msgs/String.h"
#include "geometry_msgs/Twist.h"
#include "turtlesim/Pose.h"
#include "turtlesim/SetPen.h"
#include "assignment5/triangle.h"
#include <math.h>
#include <actionlib/client/simple_action_client.h>
#include <actionlib/server/simple_action_server.h>
#include <turtlebot_actions/TurtlebotMoveAction.h>
//#include <turtlebot_actions/TurtlebotMoveGoal.h>
#include<turtlebot_actions/TurtlebotMoveActionGoal.h>
#include<turtlebot_actions/TurtlebotMoveActionFeedback.h>
#include<actionlib/client/simple_client_goal_state.h>
#include<actionlib/client/simple_action_client.h>
#include<turtlebot_actions/TurtlebotMoveActionResult.h>


#define _USE_MATH_DEFINES
#define BUFFER_SIZE 1
#define SPEED 0.15 
#define SUBSCRIBER_MSG_TOPIC "cmd"
using namespace std;



char nodeName [] = "move_triangle";
ros::Publisher thePublisher;
bool clockwize = false;
double forwardDist=0.0;
bool starting = false;
double angleInRadius = 120 * M_PI / 180;
bool commandReceived = false;
bool running = false;



void movePublisher(double speed, bool cw, double distance);
void rotationProcessing(bool cw, int angle);
void moveManager(float dist, bool clw);
void DoneCallback(const actionlib::SimpleClientGoalState& state,const turtlebot_actions::TurtlebotMoveResultConstPtr resultMsg);
void ActiveCallback();
void FeedbackCallback(turtlebot_actions::TurtlebotMoveFeedbackConstPtr feedbackMsg);

//Callback triangle

void commandtriangleReceived(const assignment5::triangle &msgIn) {
    commandReceived =true;
   forwardDist=  msgIn.sideLength;
   clockwize=msgIn.clw;
    moveManager(forwardDist, clockwize);
}

void FeedbackCallback(turtlebot_actions::TurtlebotMoveFeedbackConstPtr feedbackMsg) {
 
    ROS_INFO_STREAM("Forward distance: "<<feedbackMsg.get()->forward_distance);
    ROS_INFO_STREAM("turn around distance: "<<feedbackMsg.get()->turn_distance);

    
}
void ActiveCallback() {

  ROS_INFO("Goal just went active");
}
void DoneCallback(const actionlib::SimpleClientGoalState& state,  const turtlebot_actions::TurtlebotMoveResultConstPtr resultMsg) {
  ROS_INFO("... Done");
}

int main(int argc, char *argv[]) {
    ros::init(argc, argv, nodeName);
    ros::NodeHandle nh;
    actionlib::SimpleActionClient<turtlebot_actions::TurtlebotMoveAction> MoveClient("turtlebot_move", true);

    ros::Subscriber subTriangle = nh.subscribe(SUBSCRIBER_MSG_TOPIC, BUFFER_SIZE, &commandtriangleReceived);

    sleep(5.0);

    while (!MoveClient.waitForServer(ros::Duration(5.0))) {
        ROS_INFO("Waiting for Turtlebot_move_action_server .....");
    }
       
        
           
                    turtlebot_actions::TurtlebotMoveActionGoal goalMsg;    

                    goalMsg.header.frame_id = "odom";
                    clockwize?goalMsg.goal.turn_distance =-angleInRadius:goalMsg.goal.turn_distance =angleInRadius;
                    goalMsg.goal.forward_distance = 0.5;

                    if (MoveClient.isServerConnected()) {
                        ROS_INFO(" Server connected");
                        MoveClient.sendGoal(goalMsg.goal, &DoneCallback, &ActiveCallback,&FeedbackCallback);
                        ROS_INFO_STREAM(goalMsg.goal);
                        MoveClient.waitForResult();
                    }           
        
    
   
 
    ros::spin();

    return 0;
}

//Now we are building the move publisher

void movePublisher(double speed, bool cw, double distance) {

    geometry_msgs::Twist moveMsg;

    //Going in the other direction
    if (starting &&!cw) {
        rotationProcessing(cw, 180);
    }

    moveMsg.linear.x = abs(speed);


    //Now we need to set the linear y and z to 0
    moveMsg.linear.z = 0;
    moveMsg.linear.y = 0;

    moveMsg.angular.x = 0;
    moveMsg.angular.y = 0;
    moveMsg.angular.z = 0;
    double current_distance = double(0);
    double T0 = ros::Time::now().toSec();
    ros::Rate rosRate(100);
    thePublisher.publish(moveMsg);
    do {
        double T1 = ros::Time::now().toSec();
        current_distance = speed * (T1 - T0);
        ros::spinOnce();
        rosRate.sleep();

    } while (current_distance <= distance);
    moveMsg.linear.x = 0;
    moveMsg.linear.y = 0;
    moveMsg.linear.z = 0;
    moveMsg.angular.x = 0;
    moveMsg.angular.y = 0;
    moveMsg.angular.z = 0;
    thePublisher.publish(moveMsg);
    rotationProcessing(cw, 120);
}
//rostopic pub -1 /assignment1/cmd geometry_msgs/Twist -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]'

void rotationProcessing(bool cw, int angle) {
    double angular_speed = 5 * M_PI / 180; // Converting to radians
    double angleInRadius = angle * M_PI / 180;
    geometry_msgs::Twist theMsg;
    //We are now perfoming the rotation task:
    //Step1 we set all the linear values to 0 as we are not performing any linear motion
    theMsg.linear.x = 0;
    theMsg.linear.y = 0;
    theMsg.linear.z = 0;

    //Angular velocity in the Y-axies
    // We have to consider the rotation direction (clock/conter clockwise)
    //Clockwise == negative values
    //Conter clockwise = positive values
    theMsg.angular.y = 0;
    theMsg.angular.x = 0;
    if (cw == true)
        theMsg.angular.z = -abs(angular_speed);
    else
        theMsg.angular.z = abs(angular_speed);


    //Now Publishing the message
    thePublisher.publish(theMsg);


    double current_angle = double(0);
    double T0 = ros::Time::now().toSec();
    ros::Rate rosRate(100);

    do {
        /* code */
        thePublisher.publish(theMsg);
        double T1 = ros::Time::now().toSec();
        current_angle = angular_speed * (T1 - T0);
        ros::spinOnce();
        rosRate.sleep();

    } while (current_angle < angleInRadius); //60 degrees is the desired angle
    cout << "the angle is already greater" << endl;
    theMsg.angular.z = 0;
    thePublisher.publish(theMsg);
}

void moveManager(float dist, bool clw) {
    int counter = 3;
    if (dist > 5) dist = 5;

    for (int i = 0; i < counter; i++) {
        /* code */
        if (i == 0)starting = true;
        else starting = false;

        movePublisher(10, clw, dist);
    }


}


